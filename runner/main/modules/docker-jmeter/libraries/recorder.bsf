import java.io.*;
import java.util.regex.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.jmeter.util.JMeterUtils;      // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/util/JMeterUtils.html
import org.apache.jmeter.threads.JMeterContext; // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/threads/JMeterContext.html
import org.apache.jmeter.samplers.SampleResult; // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/samplers/SampleResult.html

MoodleResult(JMeterContext ctx) {
    Integer thread = ctx.getThreadNum();
    SampleResult result = ctx.getPreviousResult();

    String html = result.getResponseDataAsString();

    String dbreads = "0";
    Pattern pdbreads = Pattern.compile(".*?DB reads/writes: (\\d+)/\\d+.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mdbreads = pdbreads.matcher(html);
    if (mdbreads.matches()) {
        dbreads = mdbreads.group(1);
    }

    String dbwritesstr = "0";
    Pattern pdbwrites = Pattern.compile(".*?DB reads/writes: \\d+/(\\d+).*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mdbwrites = pdbwrites.matcher(html);
    if (mdbwrites.matches()) {
        dbwritesstr = mdbwrites.group(1);
    }
    Integer dbwrites = Integer.parseInt(dbwritesstr);

    // Adding logs if required.
    if (props.get("includelogs") != null) {
        Pattern plogwrites = Pattern.compile(".*?Log DB writes (\\d+).*", Pattern.UNIX_LINES | Pattern.DOTALL);
        Matcher mlogwrites = plogwrites.matcher(html);
        if (mlogwrites.matches()) {
            dbwrites = dbwrites + Integer.parseInt(mlogwrites.group(1));
        }
    }

    String dbquerytime = "0";
    Pattern pdbquerytime = Pattern.compile(".*?DB queries time: (\\d+(\\.\\d+)?) secs.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mdbquerytime = pdbquerytime.matcher(html);
    if (mdbquerytime.matches()) {
        dbquerytime = mdbquerytime.group(1);
    }

    String memoryused = "0";
    Pattern pmemoryused = Pattern.compile(".*?RAM: (\\d+(\\.\\d+)?)[^M]*MB.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mmemoryused = pmemoryused.matcher(html);
    if (mmemoryused.matches()) {
        memoryused = mmemoryused.group(1);
    }

    String filesincluded = "0";
    Pattern pfilesincluded = Pattern.compile(".*?Included (\\d+) files.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mfilesincluded = pfilesincluded.matcher(html);
    if (mfilesincluded.matches()) {
        filesincluded = mfilesincluded.group(1);
    }

    String serverload = "0";
    Pattern pserverload = Pattern.compile(".*?Load average: (\\d+(\\.\\d+)?).*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mserverload = pserverload.matcher(html);
    if (mserverload.matches()) {
        serverload = mserverload.group(1);
    }

    String sessionsize = "0";
    Pattern psessionsize = Pattern.compile(".*?Session[^:]*: (\\d+(\\.\\d+)? ?[a-zA-Z]*).*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher msessionsize = psessionsize.matcher(html);
    if (msessionsize.matches()) {
        sessionsize = msessionsize.group(1);
    }

    String timeused = "0";
    Pattern ptimeused = Pattern.compile(".*?\"timeused[^\"]*\">(\\d+(\\.\\d+)?) secs.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mtimeused = ptimeused.matcher(html);
    if (mtimeused.matches()) {
        timeused = mtimeused.group(1);
    }

    // Actual information collected about the sample by jmeter
    String username = vars.get("username");
    String name = StringUtils.rightPad(result.getSampleLabel(), 30);
    String url = result.getUrlAsString();
    Integer bytes = result.getBytes();
    Long time = result.getTime();
    Long latency = result.getLatency();
    Long starttime = result.getStartTime();
    String status = result.getResponseCode();

    headerToString() {
        String str = "status | thread | ";
        str += StringUtils.rightPad("user", 10) + " | ";
        str += StringUtils.rightPad("name", 30) + " | db-r | db-w | ";
        str += StringUtils.rightPad("dbquerytime", 8) + " | ";
        str += StringUtils.rightPad("memory", 8) + " | ";
        str += StringUtils.rightPad("files", 6) + " | ";
        str += StringUtils.rightPad("load", 6) + " |";
        return str;
    }

    toString() {
        String str = StringUtils.rightPad(status, 6) + " | ";
        str += StringUtils.rightPad(Integer.toString(thread), 6) + " | ";
        str += StringUtils.rightPad(username, 10) + " | ";
        str += StringUtils.rightPad(name, 30) + " | ";
        str += StringUtils.rightPad(dbreads, 4) + " | ";
        str += StringUtils.rightPad(Integer.toString(dbwrites), 4) + " | ";
        str += StringUtils.rightPad(dbquerytime, 8) + " | ";
        str += StringUtils.rightPad(memoryused, 8) + " | ";
        str += StringUtils.rightPad(filesincluded, 6) + " | ";
        str += StringUtils.rightPad(serverload, 6) + " | ";
        str += url;
        return str;
    }

    toPHP() {

       int bytesPos = sessionsize.indexOf(" bytes");
       int kbsPos = sessionsize.indexOf("KB");
       // Convert the size to KB and strip out the measure.
       if (bytesPos != -1) {
           sessionsize = "0." + sessionsize.substring(0, bytesPos);
       } else if (kbsPos != -1) {
           sessionsize = sessionsize.substring(0, kbsPos);
       }

       String php = "$results["+thread+"][] = array(\n";
       php += "    'thread'=>"+thread+",\n";        // Int
       php += "    'starttime'=>"+starttime+",\n";      // Long
       php += "    'dbreads'=>"+Integer.parseInt(dbreads)+",\n";    // String => Int
       php += "    'dbwrites'=>"+dbwrites+",\n";
       php += "    'dbquerytime'=>"+dbquerytime+",\n";
       php += "    'memoryused'=>'"+memoryused+"',\n";
       php += "    'filesincluded'=>'"+filesincluded+"',\n";
       php += "    'serverload'=>'"+serverload+"',\n";
       php += "    'sessionsize'=>'"+sessionsize+"',\n";
       php += "    'timeused'=>'"+timeused+"',\n";
       php += "    'name'=>'"+name+"',\n";
       php += "    'url'=>'"+url+"',\n";
       php += "    'bytes'=>'"+bytes+"',\n";
       php += "    'time'=>'"+time+"',\n";
       php += "    'latency'=>'"+latency+"',\n";
       php += ");\n";
       return php;
    }

    return this;
}

EscapeQuotes(String text) {
    return text.replace("'", "\\'");
}

DebugValue(DebugValue) {
    if (DebugValue == null) {
        DebugValue = '[NULL]';
    }

    String logPath = "output/logs/debug.log";
    FileWriter logStream = new FileWriter(logPath, true);
    BufferedWriter debugWriter = new BufferedWriter(logStream);
    debugWriter.write(DebugValue);
    debugWriter.write("\n");
    debugWriter.close();
}

WritePhpValue(String key, null value) {
    WritePhpValue(key, '');
}

WritePhpValue(String key, null value, bool escape) {
    WritePhpValue(key, '', escape);
}

WritePhpValue(String key, String value) {
    WritePhpLine(key, value, false);
}

WritePhpValue(String key, String value, bool escape) {
    if (escape) {
        value = EscapeQuotes(value);
    }

    WritePhpLine("$" + key + " = '" + value + "';");
}

WritePhpLine(String line) {
    String filenamepath = "output/runs/rundata.php";
    FileWriter fstream = new FileWriter(filenamepath, true);
    BufferedWriter out = new BufferedWriter(fstream);
    out.write(line);
    out.write("\n");
    out.close();
}

Runnable mr = MoodleResult(ctx);

// We add the run info when starting the first thread
DebugValue("Checking if header printed");
if (JMeterUtils.getProperty("headerprinted") == null) {
    DebugValue("Header not printed - adding it now");
    // Output headers.
    JMeterUtils.setProperty("headerprinted", "1");
    print(mr.headerToString());
    DebugValue(mr.headerToString());

    DebugValue("Host:");
    DebugValue(vars.get("host"));

    DebugValue("Site path:");
    DebugValue(vars.get("sitepath"));

    DebugValue("Group:");
    DebugValue(props.get("group"));

    DebugValue("Run Desec:");
    DebugValue(props.get("desc"));

    DebugValue("Users:");
    DebugValue(vars.get("users"));

    DebugValue("Loops:");
    DebugValue(vars.get("loops"));

    DebugValue("Rampup:");
    DebugValue(vars.get("rampup"));

    DebugValue("Throughput:");
    DebugValue(vars.get("throughput"));

    DebugValue("Size:");
    DebugValue(vars.get("size"));

    DebugValue("Base:");
    DebugValue(vars.get("moodleversion"));

    DebugValue("Site version:");
    DebugValue(props.get("siteversion"));

    DebugValue("Site branch:");
    DebugValue(props.get("sitebranch"));

    DebugValue("Site Commit:");
    DebugValue(props.get("sitecommit"));

    DebugValue("All done");

    WritePhpValue("host", vars.get("host"));
    WritePhpValue("sitepath", vars.get("sitepath"));
    WritePhpValue("group", props.get("group"));
    WritePhpValue("rundesc", props.get("desc"));
    WritePhpValue("users", vars.get("users"));
    WritePhpValue("loopcount", vars.get("loops"));
    WritePhpValue("rampup", vars.get("rampup"));
    WritePhpValue("throughput", vars.get("throughput"));
    WritePhpValue("size", vars.get("size"));
    WritePhpValue("baseversion", vars.get("moodleversion"));
    WritePhpValue("siteversion", props.get("siteversion"), true);
    WritePhpValue("sitebranch", props.get("sitebranch"), true);
    WritePhpValue("sitecommit", props.get("sitecommit"));

    // Send the run timestamp to set it as run filename.
    props.put("filepath", "runs/" + vars.get("runtimestamp") + ".php");
    DebugValue("Header now printed");
} else {
    DebugValue("Header printed");
}

WritePhpLine(mr.toPHP());

print(mr.toString());
DebugValue(mr.toString());
